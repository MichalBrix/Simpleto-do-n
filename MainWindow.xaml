<Window x:Class="Simpletodon.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Simpletodon"
        xmlns:misc="clr-namespace:Simpletodon.Misc"
        xmlns:localData="clr-namespace:Simpletodon.Data"
        mc:Ignorable="d"
        Title="Simpleto(do)n" Height="450" Width="800" PreviewKeyDown="Window_PreviewKeyDown" Icon="/SimpletodonIcon.ico">
<Window.Resources>

        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="White"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="White"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="White"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181"/>
        <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>

        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                            <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



        <Style x:Key="LibraryTreeViewItemStyle"
               TargetType="{x:Type TreeViewItem}">
            <Setter Property="IsExpanded"
                        Value="{Binding IsExpanded, Mode=TwoWay}" />
            <Setter Property="IsSelected"
                        Value="{Binding IsSelected, Mode=TwoWay}" />


            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
                            <Border x:Name="Bd" Grid.Column="1" BorderBrush="White" BorderThickness="0" Background="White" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>


        </Style>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="20"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
        </Grid.RowDefinitions>
        <Menu Grid.Row="0">
            <MenuItem Header="_File">
                <MenuItem Header="_New" Click="MainMenuClick_New"></MenuItem>
                <MenuItem Header="_Save" Click="MainMenuClick_Save"></MenuItem>
                <MenuItem Header="S_ave As" Click="MainMenuClick_SaveAs"></MenuItem>
                <MenuItem Header="_Load" Click="MainMenuClick_Load"></MenuItem>
            </MenuItem>
        </Menu>
        <DockPanel HorizontalAlignment="Stretch" Grid.Row="1">
            <DockPanel.Resources>
                <HierarchicalDataTemplate DataType="{x:Type localData:ToDoElement}" ItemsSource="{Binding Path=Children}">
                    <Border BorderBrush="LightGray" Background="White" BorderThickness=" 0 0.7 0 0.7">
                        <Grid HorizontalAlignment="Stretch" MinWidth="400">
                            <Grid.Style>
                                <Style TargetType="{x:Type Grid}">
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=IsInProgress, Mode=OneWay}" Value="False"></Condition>
                                                <Condition Binding="{Binding Path=IsFinished, Mode=OneWay}" Value="False"></Condition>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" Value="White"></Setter>
                                        </MultiDataTrigger>
                                        <DataTrigger Binding="{Binding Path=IsInProgress, Mode=OneWay}" Value="True">
                                            <Setter Property="Background" Value="Khaki"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=IsFinished, Mode=OneWay}" Value="True">
                                            <Setter Property="Background" Value="GreenYellow"></Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                                <ColumnDefinition Width="45"></ColumnDefinition>
                                <ColumnDefinition Width="30"></ColumnDefinition>
                                <ColumnDefinition Width="30"></ColumnDefinition>
                                <ColumnDefinition Width="50"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition></RowDefinition>
                            </Grid.RowDefinitions>
                            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Column="1">
                                <TextBlock FontSize="8" Foreground="Black" Text="{Binding Path=OpenElementsNo, StringFormat=Open: {0}}"></TextBlock>
                                <TextBlock FontSize="8" Foreground="Black" Text="{Binding Path=InProgressElementsNo, StringFormat=WIP:  {0}}"></TextBlock>
                                <TextBlock FontSize="8" Foreground="Black" Text="{Binding Path=FinishedElementsNo, StringFormat=Done: {0}}"></TextBlock>
                            </StackPanel>
                            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Right" Grid.Row="0" Grid.Column="2">
                                <Menu Name="ToDoElementMenu">
                                    <MenuItem Header="...">
                                        <MenuItem  Header="Add child below [alt+b]" Click="MenuItem_AddChildBelow"></MenuItem>
                                        <MenuItem  Header="Add sibling below [alt+n]" Click="MenuItem_AddSibling"></MenuItem>
                                        <MenuItem  Header="&lt;&lt;&lt; [alt+&lt;]" Click="MenuItem_MoveLeft"></MenuItem>
                                        <MenuItem  Header="&gt;&gt;&gt; [alt+&gt;]" Click="MenuItem_MoveRight"></MenuItem>
                                        <MenuItem  Header="Delete [alt+del]" Click="MenuItem_Delete"></MenuItem>
                                        <!--Need to change those from alt to ctrl - alt + letters may end up with language specific letters-->
                                        <MenuItem  Header="Mark as work in progress [ctrl+w]" Click="MenuItem_MarkWorkInProgress"></MenuItem>
                                        <MenuItem  Header="Mark as done [ctrl+d]" Click="MenuItem_MarkFinished"></MenuItem>
                                        <MenuItem  Header="Clear marking [clrl+e]" Click="MenuItem_ClearMarking"></MenuItem>
                                    </MenuItem>
                                </Menu>
                            </StackPanel>
                            <Grid VerticalAlignment="Center" Grid.Column="4" Grid.Row="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition></ColumnDefinition>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition></RowDefinition>
                                    <RowDefinition></RowDefinition>
                                </Grid.RowDefinitions>
                                <Button AllowDrop="True" Name="ArrowUpButton" Grid.Row="0" DragDrop.Drop="ArrowUpButton_Drop" VerticalAlignment="Top" MaxHeight="15" Click="ArrowUpButton_Click">
                                    <Path VerticalAlignment="Center" Stretch="Fill">
                                        <Path.Style>
                                            <Style TargetType="{x:Type Path}">
                                                <Setter Property="Fill" Value="LightGray"></Setter>
                                                <Setter Property="Stroke" Value="Black"></Setter>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding ElementName=ArrowUpButton, Path=IsMouseOver}" Value="True">
                                                        <Setter Property="Fill" Value="Lime"></Setter>
                                                        <Setter Property="Stroke" Value="DarkGreen"></Setter>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ElementName=ArrowUpButton, Path=IsMouseOver}" Value="False">
                                                        <Setter Property="Fill" Value="LightGray"></Setter>
                                                        <Setter Property="Stroke" Value="DarkGray"></Setter>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Path.Style>
                                        <Path.Data>
                                            <PathGeometry Figures="M 15,0 L 30,10 L 15,5 L 0,10 L 15,0">
                                            </PathGeometry>
                                        </Path.Data>
                                    </Path>
                                </Button>
                                <Button Height="20" Width="50" AllowDrop="True" Name="ArrowDownButton" Grid.Row="1" DragDrop.Drop="ArrowDownButton_Drop" VerticalAlignment="Bottom" HorizontalAlignment="Center" MaxHeight="15" Click="ArrowDownButton_Click">
                                    <Path VerticalAlignment="Center" Stretch="Fill">
                                        <Path.Style>
                                            <Style TargetType="{x:Type Path}">
                                                <Setter Property="Fill" Value="LightGray"></Setter>
                                                <Setter Property="Stroke" Value="Black"></Setter>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding ElementName=ArrowDownButton, Path=IsMouseOver}" Value="True">
                                                        <Setter Property="Fill" Value="Lime"></Setter>
                                                        <Setter Property="Stroke" Value="DarkGreen"></Setter>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ElementName=ArrowDownButton, Path=IsMouseOver}" Value="False">
                                                        <Setter Property="Fill" Value="LightGray"></Setter>
                                                        <Setter Property="Stroke" Value="DarkGray"></Setter>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Path.Style>
                                        <Path.Data>
                                            <PathGeometry Figures="M 15,10 L 30,0 L 15,5 L 0,0 L 15,10">
                                            </PathGeometry>
                                        </Path.Data>
                                    </Path>
                                </Button>
                            </Grid>
                            <Canvas Grid.Column="3" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Ellipse Name="DragPoint" MouseMove="Ellipse_MouseMove" Width="25" Height="25" Canvas.Top="-12.5" Canvas.Left="-12.5" Stroke="Black" StrokeThickness="0.8">
                                    <Ellipse.Style>
                                        <Style TargetType="{x:Type Ellipse}">
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Fill" Value="LightGreen"></Setter>
                                                </Trigger>
                                                <Trigger Property="IsMouseOver" Value="False">
                                                    <Setter Property="Fill" Value="LightBlue"></Setter>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Ellipse.Style>
                                </Ellipse>
                            </Canvas>
                            <TextBox Name="ToDoTextbox" misc:FocusExtension.IsFocused="{Binding Path=IsTextBoxFocused, Mode=TwoWay}" Grid.Column="0" GotFocus="TextBox_GotFocus" LostFocus="TextBox_LostFocus" PreviewKeyDown="TextBox_PreviewKeyDown" Text="{Binding Path=Description, Mode=TwoWay}" AcceptsReturn="True" SpellCheck.IsEnabled="True">
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}">
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Path=IsInProgress, Mode=OneWay}" Value="False"></Condition>
                                                    <Condition Binding="{Binding Path=IsFinished, Mode=OneWay}" Value="False"></Condition>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="BorderBrush" Value="White"></Setter>
                                                <Setter Property="Background" Value="White"></Setter>
                                            </MultiDataTrigger>
                                            <DataTrigger Binding="{Binding Path=IsInProgress, Mode=OneWay}" Value="True">
                                                <Setter Property="Background" Value="Khaki"></Setter>
                                                <Setter Property="BorderBrush" Value="Khaki"></Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Path=IsFinished, Mode=OneWay}" Value="True">
                                                <Setter Property="Background" Value="GreenYellow"></Setter>
                                                <Setter Property="BorderBrush" Value="GreenYellow"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                        </Grid>
                    </Border>
                </HierarchicalDataTemplate>
            </DockPanel.Resources>

            <TreeView Name="ToDoTree" ScrollViewer.VerticalScrollBarVisibility="Visible" ItemContainerStyle="{StaticResource LibraryTreeViewItemStyle}" PreviewKeyDown="ToDoTree_PreviewKeyDown" VirtualizingStackPanel.IsVirtualizing ="False"></TreeView>
        </DockPanel>
    </Grid>
</Window>
